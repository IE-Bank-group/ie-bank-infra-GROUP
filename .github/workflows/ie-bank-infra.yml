name: ie-bank-infra

on:
  workflow_dispatch:
  push:
      branches: 
        - '*'
      paths-ignore:
        - 'scripts/**'
  pull_request:
    branches: 
        - "main" 

env:
  RESOURCE_GROUP_DEV: BCSAI2024-DEVOPS-STUDENTS-B-DEV
  RESOURCE_GROUP_UAT: BCSAI2024-DEVOPS-STUDENTS-B-UAT
  RESOURCE_GROUP_PROD: BCSAI2024-DEVOPS-STUDENTS-B-PROD
  SUBSCRIPTION_ID_DEV: e0b9cada-61bc-4b5a-bd7a-52c606726b3b
  USER_ALIAS: apayne
  KEY_VAULT_SECRET_NAME_ACR_USERNAME: ACR-Username
  KEY_VAULT_SECRET_NAME_ACR_PASSWORD: ACR-Password
  KEY_VAULT_NAME: apayne-kv-dev
  DOCKER_REGISTRY_SERVER_URL: myregistry.azurecr.io
  # REGISTRY_USERNAME:
  # REGISTRY_PASSWORD:




jobs:
  bootstrap: 
    runs-on: ubuntu-latest
    steps: 
    - uses: actions/checkout@v3

    - name: azure login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Key Vault if not exists
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ env.SUBSCRIPTION_ID_DEV }}
        resourceGroupName: ${{ env.RESOURCE_GROUP_DEV }}
        template: ./modules/key-vault.bicep
        parameters: keyVaultName=${{ env.KEY_VAULT_NAME }}

    - name: Initialize Secrets if Empty
      run: |
          existing_secrets=$(az keyvault secret list --vault-name ${{ env.KEY_VAULT_NAME }} --query [].name -o tsv)
          
          if [[ ! "$existing_secrets" =~ "${{ env.KEY_VAULT_SECRET_NAME_ACR_USERNAME }}" ]]; then
            az keyvault secret set --vault-name ${{ env.KEY_VAULT_NAME }} --name "${{ env.KEY_VAULT_SECRET_NAME_ACR_USERNAME }}" --value "<initial-username>"
          fi
          
          if [[ ! "$existing_secrets" =~ "${{ env.KEY_VAULT_SECRET_NAME_ACR_PASSWORD }}" ]]; then
            az keyvault secret set --vault-name ${{ env.KEY_VAULT_NAME }} --name "${{ env.KEY_VAULT_SECRET_NAME_ACR_PASSWORD }}" --value "<initial-password>"
          fi    




  build:
    runs-on: ubuntu-latest
    needs: bootstrap
    outputs: 
      image-version: ${{ steps.image-version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v3

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      
    - name: Retrieve ACR credentials from Key Vault
      run: |
        echo "REGISTRY_USERNAME=$(az keyvault secret show --name ${{env.KEY_VAULT_SECRET_NAME_ACR_USERNAME }} --vault-name ${{ env.KEY_VAULT_NAME}} --query value -o tsv)" >> $GITHUB_ENV
        echo "REGISTRY_PASSWORD=$(az keyvault secret show --name ${{env.KEY_VAULT_SECRET_NAME_ACR_PASSWORD }} --vault-name ${{ env.KEY_VAULT_NAME}} --query value -o tsv)" >> $GITHUB_ENV

    # - name: "Login to Docker Registry"
    #   uses: azure/docker-login@v2
    #   with:
    #     login-server: ${{ env.DOCKER_REGISTRY_SERVER_URL }}
    #     username: ${{ env.REGISTRY_USERNAME }}
    #     password: ${{ env.REGISTRY_PASSWORD }}

    - name: Set image version
      id: image-version
      run: |
        echo "version=$(date +'%Y.%m.%d.%H.%M')" >> $GITHUB_OUTPUT

      # checkout code
    - uses: actions/checkout@v3

      # Lint Bicep code 
    - name: Run Bicep linter
      run: az bicep build --file ./main.bicep --only-show-errors --output json

      # unit tests for bicep files (you may need to define a script for this if it's custom testing)
    - name: Run Bicep unit tests
      run: |
        chmod +x ./test-bicep.sh  
        ./test-bicep.sh  

      # checkov scans    
    - name: run checkov scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: './'
        file: 'main.bicep'
      continue-on-error: true

      # upload bicep build artifact 
    - name: upload bicep build artifact
      uses: actions/upload-artifact@v4
      with:
        name: bicep-build
        path: ./main.bicep

      


  deploy-dev:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: build
    environment: 'Development'

    steps:
      # Checkout code
    - uses: actions/checkout@v3

    - name: Download Bicep build artifact
      uses: actions/download-artifact@v4
      with:
        name: bicep-build  

      # Deploy Bicep file
    - name: deploy to azure using bicep
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ env.SUBSCRIPTION_ID_DEV }}
        resourceGroupName: ${{ env.RESOURCE_GROUP_DEV }}
        template: ./main.bicep
        parameters: ./parameters/dev.parameters.json #appServiceAPIEnvVarENV=${{ vars.ENV }} appServiceAPIEnvVarDBHOST=${{ vars.DBHOST }} appServiceAPIEnvVarDBNAME=${{ vars.DBNAME }} appServiceAPIEnvVarDBPASS=${{ secrets.DBPASS }} appServiceAPIDBHostDBUSER=${{ secrets.DBUSER }} appServiceAPIDBHostFLASK_APP=${{ vars.FLASK_APP }} appServiceAPIDBHostFLASK_DEBUG=${{ vars.FLASK_DEBUG }}
        deploymentName: ${{ env.USER_ALIAS }}-dev
        failOnStdErr: false



  deploy-uat:
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    needs: build
    environment: 'UAT'
    
    steps:
    - uses: actions/checkout@v3
    - name: download bicep build artifact
      uses: actions/download-artifact@v4
      with:
        name: bicep-build
        

          # Deploy Bicep file
    - name: deploy to uat
      uses: azure/arm-deploy@v2
      with:
        subscriptionId: ${{ env.SUBSCRIPTION_ID_DEV }}
        resourceGroupName: ${{ env.RESOURCE_GROUP_UAT }}
        template: ./main.bicep
        parameters: ./parameters/uat.parameters.json #appServiceAPIEnvVarENV=${{ vars.ENV }} appServiceAPIEnvVarDBHOST=${{ vars.DBHOST }} appServiceAPIEnvVarDBNAME=${{ vars.DBNAME }} appServiceAPIEnvVarDBPASS=${{ secrets.DBPASS }} appServiceAPIDBHostDBUSER=${{ secrets.DBUSER }} appServiceAPIDBHostFLASK_APP=${{ vars.FLASK_APP }} appServiceAPIDBHostFLASK_DEBUG=${{ vars.FLASK_DEBUG }}
        deploymentName: ${{ env.USER_ALIAS }}-uat
        failOnStdErr: false



  # deploy-prod:
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   needs: deploy-uat
  #   environment: 'Production'

  #   steps: 
  #   - uses: actions/checkout@v3
  #   - name: download bicep build artifact
  #     uses: actions/download-artifact@v4
  #     with: 
  #       name: bicep-build

  #   # - uses: azure/login@v2
  #   #   with: 
  #   #     creds: ${{ secrets.AZURE_CREDENTIALS }}

  #   - name: deploy to prod
  #     uses: azure/arm-deploy@v2
  #     with:
  #       subscriptionId: ${{ env.SUBSCRIPTION_ID_DEV }}
  #       resourceGroupName: ${{ env.RESOURCE_GROUP_PROD }}
  #       template: ./main.bicep
  #       parameters: ./parameters/prod.parameters.json #appServiceAPIEnvVarENV=${{ vars.ENV }} appServiceAPIEnvVarDBHOST=${{ vars.DBHOST }} appServiceAPIEnvVarDBNAME=${{ vars.DBNAME }} appServiceAPIEnvVarDBPASS=${{ secrets.DBPASS }} appServiceAPIDBHostDBUSER=${{ secrets.DBUSER }} appServiceAPIDBHostFLASK_APP=${{ vars.FLASK_APP }} appServiceAPIDBHostFLASK_DEBUG=${{ vars.FLASK_DEBUG }}
  #       deploymentName: ${{ env.USER_ALIAS }}-prod
  #       failOnStdErr: false


