{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.31.92.45157",
      "templateHash": "2692746773792411668"
    }
  },
  "parameters": {
    "environmentType": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "uat",
        "prod"
      ],
      "metadata": {
        "description": "The environment type"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "postgreSQLServerName": {
      "type": "securestring"
    },
    "postgreSQLDatabaseName": {
      "type": "string"
    },
    "storageSizeGB": {
      "type": "int"
    },
    "appServicePlanName": {
      "type": "string"
    },
    "appServiceAppName": {
      "type": "string"
    },
    "appServiceAPIAppName": {
      "type": "string"
    },
    "appServiceAPIDBHostFLASK_APP": {
      "type": "string"
    },
    "appServiceAPIDBHostFLASK_DEBUG": {
      "type": "string",
      "allowedValues": [
        "0",
        "1"
      ]
    },
    "appServiceAPIEnvVarENV": {
      "type": "string"
    },
    "appServiceAPIEnvVarDBHOST": {
      "type": "string"
    },
    "appServiceAPIEnvVarDBNAME": {
      "type": "string"
    },
    "appServiceAPIEnvVarDBUSER": {
      "type": "string"
    },
    "appServiceAPIEnvVarDBPASS": {
      "type": "securestring"
    },
    "containerRegistryName": {
      "type": "string"
    },
    "dockerRegistryImageName": {
      "type": "string"
    },
    "dockerRegistryImageTag": {
      "type": "string"
    },
    "dockerRegistryUserName": {
      "type": "string"
    },
    "dockerRegistryPassword": {
      "type": "string"
    },
    "appInsightsName": {
      "type": "string"
    },
    "logAnalyticsWorkspaceName": {
      "type": "string"
    },
    "keyVaultName": {
      "type": "string"
    },
    "keyVaultRoleAssignments": {
      "type": "array",
      "defaultValue": []
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('logAnalytics-{0}', parameters('environmentType'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "workspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "11967205352785078247"
            }
          },
          "parameters": {
            "workspaceName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "sku": {
              "type": "string",
              "defaultValue": "PerGB2018"
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-06-01",
              "name": "[parameters('workspaceName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "name": "[parameters('sku')]"
                },
                "retentionInDays": 30
              }
            }
          ],
          "outputs": {
            "workspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[parameters('workspaceName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('appInsights-{0}', parameters('environmentType'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appInsightsName": {
            "value": "[parameters('appInsightsName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('logAnalytics-{0}', parameters('environmentType'))), '2022-09-01').outputs.workspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "9525086094266397791"
            }
          },
          "parameters": {
            "appInsightsName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string"
            },
            "applicationType": {
              "type": "string",
              "defaultValue": "web",
              "allowedValues": [
                "web",
                "other"
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('appInsightsName')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('applicationType')]",
              "properties": {
                "Application_Type": "[parameters('applicationType')]",
                "WorkspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]"
              }
            }
          ],
          "outputs": {
            "appInsightsInstrumentationKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').InstrumentationKey]"
            },
            "appInsightsConnectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').ConnectionString]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('logAnalytics-{0}', parameters('environmentType')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('keyVault-{0}', parameters('environmentType'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "environmentType": {
            "value": "[parameters('environmentType')]"
          },
          "enableVaultForDeployment": {
            "value": true
          },
          "roleAssignments": {
            "value": "[parameters('keyVaultRoleAssignments')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "8800465280275226072"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "keyVaultName": {
              "type": "string"
            },
            "enableVaultForDeployment": {
              "type": "bool",
              "defaultValue": true
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": []
            },
            "environmentType": {
              "type": "string",
              "allowedValues": [
                "dev",
                "uat",
                "prod"
              ]
            }
          },
          "variables": {
            "keyVaultSku": "standard",
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
              "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
              "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
              "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
              "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
              "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
              "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
              "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            },
            "networkRules": "[if(equals(parameters('environmentType'), 'dev'), createObject('defaultAction', 'Allow'), if(equals(parameters('environmentType'), 'uat'), createObject('defaultAction', 'Deny', 'ipRules', createArray('0.0.0.0')), createObject('defaultAction', 'Deny', 'virtualNetworkRules', createArray(createObject('id', '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}')))))]",
            "accessPolicies": "[if(equals(parameters('environmentType'), 'dev'), createArray(createObject('tenantId', subscription().tenantId, 'objectId', 'daa3436a-d1fb-44fe-b34b-053db433cdb7', 'permissions', createObject('secrets', createArray('get', 'list', 'set'), 'certificates', createArray('get', 'list')))), if(equals(parameters('environmentType'), 'uat'), createArray(createObject('tenantId', subscription().tenantId, 'objectId', 'daa3436a-d1fb-44fe-b34b-053db433cdb7', 'permissions', createObject('secrets', createArray('get', 'list', 'set'), 'certificates', createArray('get', 'list'))), createObject('tenantId', subscription().tenantId, 'objectId', 'daa3436a-d1fb-44fe-b34b-053db433cdb7', 'permissions', createObject('secrets', createArray('get', 'list'), 'certificates', createArray('get', 'list')))), createArray(createObject('tenantId', subscription().tenantId, 'objectId', 'daa3436a-d1fb-44fe-b34b-053db433cdb7', 'permissions', createObject('secrets', createArray('get', 'list', 'set', 'delete'), 'certificates', createArray('get', 'list', 'set', 'delete'), 'keys', createArray('get', 'list', 'set', 'delete'))))))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-06-01-preview",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                "enableRbacAuthorization": true,
                "enableSoftDelete": true,
                "enabledForTemplateDeployment": true,
                "sku": {
                  "family": "A",
                  "name": "[variables('keyVaultSku')]"
                },
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": "[variables('accessPolicies')]",
                "networkAcls": "[variables('networkRules')]"
              }
            }
          ],
          "outputs": {
            "keyVaultResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[parameters('keyVaultName')]"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2021-06-01-preview').vaultUri]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('logAnalytics-{0}', parameters('environmentType')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('postgres-{0}', parameters('environmentType'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "postgresSQLServerName": {
            "value": "[parameters('postgreSQLServerName')]"
          },
          "postgresSQLDatabaseName": {
            "value": "[parameters('postgreSQLDatabaseName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "environmentType": {
            "value": "[parameters('environmentType')]"
          },
          "logsAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('logAnalytics-{0}', parameters('environmentType'))), '2022-09-01').outputs.workspaceId.value]"
          },
          "storageSizeGB": {
            "value": "[parameters('storageSizeGB')]"
          },
          "appServiceAPIEnvVarDBPASS": {
            "value": "[parameters('appServiceAPIEnvVarDBPASS')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "10289702712888802782"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "postgresSQLServerName": {
              "type": "string"
            },
            "postgresSQLDatabaseName": {
              "type": "string"
            },
            "logsAnalyticsWorkspaceId": {
              "type": "string"
            },
            "appServiceAPIEnvVarDBPASS": {
              "type": "string"
            },
            "environmentType": {
              "type": "string",
              "allowedValues": [
                "dev",
                "uat",
                "prod"
              ]
            },
            "storageSizeGB": {
              "type": "int",
              "minValue": 32,
              "maxValue": 1024
            }
          },
          "variables": {
            "backupRetentionDays": "[if(equals(parameters('environmentType'), 'prod'), 14, if(equals(parameters('environmentType'), 'uat'), 7, 3))]",
            "allowedIpAddresses": "[if(equals(parameters('environmentType'), 'dev'), createArray('0.0.0.0'), createArray('0.0.0.0'))]"
          },
          "resources": [
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
              "apiVersion": "2022-12-01",
              "name": "[format('{0}/{1}', parameters('postgresSQLServerName'), 'AllowAllAzureServices')]",
              "properties": {
                "startIpAddress": "[variables('allowedIpAddresses')[0]]",
                "endIpAddress": "[variables('allowedIpAddresses')[0]]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresSQLServerName'))]"
              ]
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers",
              "apiVersion": "2022-12-01",
              "name": "[parameters('postgresSQLServerName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard_B1ms",
                "tier": "Burstable"
              },
              "properties": {
                "administratorLogin": "iebankdbadmin",
                "administratorLoginPassword": "[parameters('appServiceAPIEnvVarDBPASS')]",
                "version": "15",
                "createMode": "Default",
                "storage": {
                  "storageSizeGB": "[parameters('storageSizeGB')]"
                },
                "backup": {
                  "backupRetentionDays": "[variables('backupRetentionDays')]",
                  "geoRedundantBackup": "[if(equals(parameters('environmentType'), 'prod'), 'Enabled', 'Disabled')]"
                }
              }
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
              "apiVersion": "2022-12-01",
              "name": "[format('{0}/{1}', parameters('postgresSQLServerName'), parameters('postgresSQLDatabaseName'))]",
              "properties": {
                "charset": "UTF8",
                "collation": "en_US.UTF8"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresSQLServerName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.DBforPostgreSQL/flexibleServers/{0}', parameters('postgresSQLServerName'))]",
              "name": "PostGresSQLServerDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logsAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "PostgreSQLFlexSessions",
                    "enabled": true
                  },
                  {
                    "category": "PostgreSQLFlexQueryStoreRuntime",
                    "enabled": true
                  },
                  {
                    "category": "PostgreSQLFlexTableStats",
                    "enabled": true
                  },
                  {
                    "category": "PostgreSQLFlexQueryStoreWaitStats",
                    "enabled": true
                  },
                  {
                    "category": "PostgreSQLLogs",
                    "enabled": true
                  },
                  {
                    "category": "PostgreSQLFlexDatabaseXacts",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresSQLServerName'))]"
              ]
            }
          ],
          "outputs": {
            "postgresSQLDatabaseName": {
              "type": "string",
              "value": "[parameters('postgresSQLDatabaseName')]"
            },
            "postgresSQLServerName": {
              "type": "string",
              "value": "[parameters('postgresSQLServerName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', parameters('environmentType')))]",
        "[resourceId('Microsoft.Resources/deployments', format('logAnalytics-{0}', parameters('environmentType')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('containerRegistry-{0}', parameters('environmentType'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "registryName": {
            "value": "[parameters('containerRegistryName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "environmentType": {
            "value": "[parameters('environmentType')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('logAnalytics-{0}', parameters('environmentType'))), '2022-09-01').outputs.workspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "2185914334123797871"
            }
          },
          "parameters": {
            "registryName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "environmentType": {
              "type": "string",
              "allowedValues": [
                "dev",
                "uat",
                "prod"
              ]
            },
            "enableGeoReplication": {
              "type": "bool",
              "defaultValue": "[equals(parameters('environmentType'), 'prod')]"
            },
            "containterRegistryDiagnostics": {
              "type": "string",
              "defaultValue": "myDiagnosticSetting"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string"
            }
          },
          "variables": {
            "containerRegistrySku": "[if(equals(parameters('environmentType'), 'prod'), 'Standard', 'Basic')]"
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-01-01-preview",
              "name": "[parameters('registryName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[variables('containerRegistrySku')]"
              },
              "properties": {
                "adminUserEnabled": true,
                "geoReplication": "[if(parameters('enableGeoReplication'), createObject('regions', createArray('East US', 'West US')), null())]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('registryName'))]",
              "name": "[parameters('containterRegistryDiagnostics')]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "ContainerRegistryLoginEvents",
                    "enabled": true
                  },
                  {
                    "category": "ContainerRegistryRepositoryEvents",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]"
              ]
            }
          ],
          "outputs": {
            "registryLoginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), '2023-01-01-preview').loginServer]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', parameters('environmentType')))]",
        "[resourceId('Microsoft.Resources/deployments', format('logAnalytics-{0}', parameters('environmentType')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('appServicePlan-{0}', parameters('environmentType'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appServicePlanName": {
            "value": "[parameters('appServicePlanName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "environmentType": {
            "value": "[parameters('environmentType')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "2493401040651576807"
            }
          },
          "parameters": {
            "appServicePlanName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "environmentType": {
              "type": "string",
              "allowedValues": [
                "dev",
                "uat",
                "prod"
              ]
            }
          },
          "variables": {
            "environmentConfig": {
              "dev": {
                "sku": "B1",
                "capacity": 1
              },
              "uat": {
                "sku": "S1",
                "capacity": 2
              },
              "prod": {
                "sku": "P1v2",
                "capacity": 3
              }
            },
            "skuName": "[variables('environmentConfig')[parameters('environmentType')].sku]",
            "capacity": "[variables('environmentConfig')[parameters('environmentType')].capacity]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2021-03-01",
              "name": "[parameters('appServicePlanName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[variables('skuName')]",
                "capacity": "[variables('capacity')]"
              },
              "kind": "linux",
              "properties": {
                "reserved": true
              }
            }
          ],
          "outputs": {
            "planId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('appInsights-{0}', parameters('environmentType')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('frontend-{0}', parameters('environmentType'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appServiceAppName": {
            "value": "[parameters('appServiceAppName')]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('appServicePlan-{0}', parameters('environmentType'))), '2022-09-01').outputs.planId.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "environmentType": {
            "value": "[parameters('environmentType')]"
          },
          "appInsightsConnectionString": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('appInsights-{0}', parameters('environmentType'))), '2022-09-01').outputs.appInsightsConnectionString.value]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('appInsights-{0}', parameters('environmentType'))), '2022-09-01').outputs.appInsightsInstrumentationKey.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "5342154733582538662"
            }
          },
          "parameters": {
            "appServiceAppName": {
              "type": "string"
            },
            "appServicePlanId": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "appInsightsInstrumentationKey": {
              "type": "string"
            },
            "appInsightsConnectionString": {
              "type": "string"
            },
            "environmentType": {
              "type": "string",
              "allowedValues": [
                "dev",
                "uat",
                "prod"
              ]
            }
          },
          "variables": {
            "frontendConfig": {
              "dev": {
                "alwaysOn": false
              },
              "uat": {
                "alwaysOn": false
              },
              "prod": {
                "alwaysOn": true
              }
            },
            "alwaysOnSetting": "[variables('frontendConfig')[parameters('environmentType')].alwaysOn]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2021-03-01",
              "name": "[parameters('appServiceAppName')]",
              "location": "[parameters('location')]",
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": true,
                "siteConfig": {
                  "linuxFxVersion": "NODE|18-lts",
                  "alwaysOn": "[variables('alwaysOnSetting')]",
                  "ftpsState": "FtpsOnly",
                  "appCommandLine": "pm2 serve /home/site/wwroot --spa --no-daemon",
                  "appSettings": [
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[parameters('appInsightsInstrumentationKey')]"
                    },
                    {
                      "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                      "value": "[parameters('appInsightsConnectionString')]"
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "appHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('appServiceAppName')), '2021-03-01').defaultHostName]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('appInsights-{0}', parameters('environmentType')))]",
        "[resourceId('Microsoft.Resources/deployments', format('appServicePlan-{0}', parameters('environmentType')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('backend-{0}', parameters('environmentType'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appServiceAPIAppName": {
            "value": "[parameters('appServiceAPIAppName')]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('appServicePlan-{0}', parameters('environmentType'))), '2022-09-01').outputs.planId.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "environmentType": {
            "value": "[parameters('environmentType')]"
          },
          "containerRegistryName": {
            "value": "[parameters('containerRegistryName')]"
          },
          "dockerRegistryImageName": {
            "value": "[parameters('dockerRegistryImageName')]"
          },
          "dockerRegistryImageTag": {
            "value": "[parameters('dockerRegistryImageTag')]"
          },
          "dockerRegistryUserName": {
            "value": "[parameters('dockerRegistryUserName')]"
          },
          "dockerRegistryPassword": {
            "value": "[parameters('dockerRegistryPassword')]"
          },
          "appSettings": {
            "value": [
              {
                "ENV": "[parameters('appServiceAPIEnvVarENV')]",
                "DBHOST": "[parameters('appServiceAPIEnvVarDBHOST')]",
                "DBNAME": "[parameters('appServiceAPIEnvVarDBNAME')]",
                "DBUSER": "[parameters('appServiceAPIEnvVarDBUSER')]",
                "DBPASS": "[parameters('appServiceAPIEnvVarDBPASS')]",
                "FLASK_APP": "[parameters('appServiceAPIDBHostFLASK_APP')]",
                "FLASK_DEBUG": "[parameters('appServiceAPIDBHostFLASK_DEBUG')]",
                "SCM_DO_BUILD_DEPLOYMENT": true,
                "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Resources/deployments', format('appInsights-{0}', parameters('environmentType'))), '2022-09-01').outputs.appInsightsInstrumentationKey.value]",
                "APPLICATIONINSIGHTS_CONNECTION_STRING": "[reference(resourceId('Microsoft.Resources/deployments', format('appInsights-{0}', parameters('environmentType'))), '2022-09-01').outputs.appInsightsConnectionString.value]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "8738755118277494538"
            }
          },
          "parameters": {
            "appServiceAPIAppName": {
              "type": "string"
            },
            "appServicePlanId": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "containerRegistryName": {
              "type": "string"
            },
            "dockerRegistryImageName": {
              "type": "string"
            },
            "dockerRegistryImageTag": {
              "type": "string"
            },
            "dockerRegistryUserName": {
              "type": "securestring"
            },
            "dockerRegistryPassword": {
              "type": "securestring"
            },
            "appSettings": {
              "type": "array",
              "defaultValue": []
            },
            "appCommandLine": {
              "type": "string",
              "defaultValue": ""
            },
            "environmentType": {
              "type": "string",
              "allowedValues": [
                "dev",
                "uat",
                "prod"
              ]
            }
          },
          "variables": {
            "backendConfig": {
              "dev": {
                "alwaysOn": false
              },
              "uat": {
                "alwaysOn": false
              },
              "prod": {
                "alwaysOn": true
              }
            },
            "alwaysOnSetting": "[variables('backendConfig')[parameters('environmentType')].alwaysOn]",
            "dockerAppSettings": [
              {
                "name": "DOCKER_REGISTRY_SERVER_URL",
                "value": "[format('https://{0}.azurecr.io', parameters('containerRegistryName'))]"
              },
              {
                "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                "value": "[parameters('dockerRegistryUserName')]"
              },
              {
                "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                "value": "[parameters('dockerRegistryPassword')]"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2021-02-01",
              "name": "[parameters('appServiceAPIAppName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": true,
                "siteConfig": {
                  "linuxFxVersion": "[format('DOCKER|{0}.azurecr.io/{1}:{2}', parameters('containerRegistryName'), parameters('dockerRegistryImageName'), parameters('dockerRegistryImageTag'))]",
                  "alwaysOn": "[variables('alwaysOnSetting')]",
                  "ftpsState": "FtpsOnly",
                  "appSettings": "[union(parameters('appSettings'), variables('dockerAppSettings'))]",
                  "appCommandLine": "[parameters('appCommandLine')]"
                }
              }
            }
          ],
          "outputs": {
            "systemAssignedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('appServiceAPIAppName')), '2021-02-01', 'full').identity.principalId]"
            },
            "appServiceAppHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('appServiceAPIAppName')), '2021-02-01').defaultHostName]"
            },
            "dockerImage": {
              "type": "string",
              "value": "[format('{0}.azurecr.io/{1}:{2}', parameters('containerRegistryName'), parameters('dockerRegistryImageName'), parameters('dockerRegistryImageTag'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('appInsights-{0}', parameters('environmentType')))]",
        "[resourceId('Microsoft.Resources/deployments', format('appServicePlan-{0}', parameters('environmentType')))]",
        "[resourceId('Microsoft.Resources/deployments', format('containerRegistry-{0}', parameters('environmentType')))]",
        "[resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', parameters('environmentType')))]"
      ]
    }
  ],
  "outputs": {
    "frontendHostName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('frontend-{0}', parameters('environmentType'))), '2022-09-01').outputs.appHostName.value]"
    },
    "backendHostName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('backend-{0}', parameters('environmentType'))), '2022-09-01').outputs.appServiceAppHostName.value]"
    },
    "containerRegistryLoginServer": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerRegistry-{0}', parameters('environmentType'))), '2022-09-01').outputs.registryLoginServer.value]"
    },
    "appInsightsInstrumentationKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('appInsights-{0}', parameters('environmentType'))), '2022-09-01').outputs.appInsightsInstrumentationKey.value]"
    },
    "appInsightsConnectionString": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('appInsights-{0}', parameters('environmentType'))), '2022-09-01').outputs.appInsightsConnectionString.value]"
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('logAnalytics-{0}', parameters('environmentType'))), '2022-09-01').outputs.workspaceId.value]"
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('logAnalytics-{0}', parameters('environmentType'))), '2022-09-01').outputs.logAnalyticsWorkspaceName.value]"
    },
    "keyVaultUri": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', parameters('environmentType'))), '2022-09-01').outputs.keyVaultUri.value]"
    }
  }
}